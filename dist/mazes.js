!function(t,s){"object"==typeof exports&&"object"==typeof module?module.exports=s():"function"==typeof define&&define.amd?define("Mazes",[],s):"object"==typeof exports?exports.Mazes=s():t.Mazes=s()}(self,(()=>(()=>{"use strict";var t={311:(t,s)=>{Object.defineProperty(s,"__esModule",{value:!0}),s.MazeSolver=void 0,s.MazeSolver=class{constructor(t,s,e){this.horizontalNodeCount=s,this.verticalNodeCount=e,this.nodes=t,this.visitedNodes=new Set,this.nextNodes=[],this.path=[],this.destX=this.horizontalNodeCount-1,this.destY=this.verticalNodeCount-1,this.start=this.nodes[0][0],this.end=this.nodes[this.destX][this.destY],this.running=!1,this.isSetup=!1,this.currentNode=this.end}handleClick(t,s){this.destX=Math.min(t,this.horizontalNodeCount-1),this.destY=Math.min(s,this.verticalNodeCount-1),this.setup()}setup(){for(var t=0;t<this.horizontalNodeCount;t++)for(var s=0;s<this.verticalNodeCount;s++)this.nodes[t][s].visited=!1,this.nodes[t][s].shortestDistance=Number.MAX_SAFE_INTEGER;this.visitedNodes=new Set,this.nextNodes=[],this.path=[],this.start=this.nodes[1][1],this.start.shortestDistance=0,this.currentNode=this.end=this.nodes[this.destX][this.destY],this.visit(this.start),this.isSetup=!0,this.running=!0}update(){if(this.end.visited||0==this.nextNodes.length)this.findShortestPath();else{var t=this.nextNodes.pop();t.visited=!0,this.visit(t),this.nextNodes=this.nextNodes.sort(((t,s)=>t.shortestDistance-s.shortestDistance))}}findShortestPath(){this.currentNode!=this.start?(this.path.push(this.currentNode),this.currentNode=this.currentNode.connectedTo.sort(((t,s)=>t.shortestDistance-s.shortestDistance))[0]):this.running=!1}visit(t){this.visitedNodes.add(t);for(var s=0;s<t.connectedTo.length;s++){var e=t.connectedTo[s];e.visited||t.shortestDistance+1<e.shortestDistance&&(e.shortestDistance=t.shortestDistance+1,this.nextNodes.push(e))}}draw(t){for(var s=0;s<this.horizontalNodeCount;s++)for(var e=0;e<this.verticalNodeCount;e++)this.nodes[s][e].shortestDistance!=Number.MAX_SAFE_INTEGER&&(t.fillStyle=this.calcColor(this.nodes[s][e].shortestDistance),t.fillRect(10*s,10*e,10,10));for(t.strokeStyle="black",t.beginPath(),t.moveTo(10*this.end.x+5,10*this.end.y+5),s=0;s<this.path.length;s++)t.lineTo(10*this.path[s].x+5,10*this.path[s].y+5);t.stroke(),t.closePath(),t.beginPath(),t.arc(10*this.start.x+5,10*this.start.y+5,3,0,2*Math.PI,!1),t.fillStyle="green",t.fill(),t.beginPath(),t.arc(10*this.end.x+5,10*this.end.y+5,3,0,2*Math.PI,!1),t.fillStyle="green",t.fill()}calcColor(t){return"hsl("+(t/200*-240+240)+",100%,50%)"}}},150:(t,s)=>{Object.defineProperty(s,"__esModule",{value:!0}),s.Node=void 0,s.Node=class{constructor(t,s){this.x=t,this.y=s,this.visited=!1,this.connectedTo=[],this.shortestDistance=Number.MAX_SAFE_INTEGER,this.eastPassage=!1,this.southPassage=!1}getUnvisitedNode(t){var s=[];return this.x>0&&!t[this.x-1][this.y].visited&&s.push(t[this.x-1][this.y]),this.x<t.length-1&&!t[this.x+1][this.y].visited&&s.push(t[this.x+1][this.y]),this.y>0&&!t[this.x][this.y-1].visited&&s.push(t[this.x][this.y-1]),this.y<t[this.x].length-1&&!t[this.x][this.y+1].visited&&s.push(t[this.x][this.y+1]),0==s.length?null:s[Math.floor(Math.random()*s.length)]}connect(t){this.connectedTo.push(t),t.x-this.x>=1?this.eastPassage=!0:t.y-this.y<=-1&&(this.southPassage=!0)}draw(t,s){t.fillStyle="black",this.southPassage||(t.beginPath(),t.moveTo(this.x*s,this.y*s),t.lineTo(this.x*s+s,this.y*s),t.stroke(),t.closePath()),this.eastPassage||(t.beginPath(),t.moveTo(this.x*s+s,this.y*s),t.lineTo(this.x*s+s,this.y*s+s),t.stroke(),t.closePath())}}},554:(t,s,e)=>{Object.defineProperty(s,"__esModule",{value:!0});const i=e(150);s.default=class{constructor(t,s){this.horizontalNodeCount=t,this.verticalNodeCount=s,this.nodes=[];for(var e=0;e<this.horizontalNodeCount;e++){this.nodes[e]=[];for(var h=0;h<this.verticalNodeCount;h++)this.nodes[e][h]=new i.Node(e,h)}this.queue=[this.nodes[0][0]],this.running=!0}update(){if(0==this.queue.length)return void(this.running=!1);var t=this.queue.shift();let s=t.getUnvisitedNode(this.nodes);null!=s&&(this.queue.push(t),t.connect(s),s.connect(t),s.visited=!0,this.queue.unshift(s))}draw(t,s){t.fillStyle="white",t.strokeStyle="black";for(var e=0;e<this.horizontalNodeCount;e++)for(var i=0;i<this.verticalNodeCount;i++)this.nodes[e][i].draw(t,s)}}},607:function(t,s,e){var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(s,"__esModule",{value:!0});const h=i(e(554)),o=e(311);s.default=class{constructor(){if(this.canvas=document.getElementById("mazes-canvas"),null==this.canvas)throw new Error("Could not find canvas.");this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.canvas.width=500,this.canvas.height=500,this.mazes=new h.default(50,45),this.mazeSolver=new o.MazeSolver(this.mazes.nodes,this.mazes.horizontalNodeCount,this.mazes.verticalNodeCount),this.canvas.addEventListener("click",(t=>{if(this.mazes.running)return;let s=this.canvas.getBoundingClientRect();var e=Math.round((t.clientX-s.left)/10),i=Math.round((t.clientY-s.top)/10);this.mazeSolver.handleClick(e,i)}))}Start(){this.animate(0)}animate(t){if(this.mazes.running)for(var s=0;s<5;s++)this.mazes.update();else this.mazeSolver.isSetup||this.mazeSolver.setup(),this.mazeSolver.update();this.draw(),requestAnimationFrame((t=>this.animate(t)))}draw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.mazeSolver.draw(this.ctx),this.mazes.draw(this.ctx,10),this.ctx.font="20px pixel",this.ctx.fillStyle="black",this.ctx.textBaseline="top",this.mazes.running?this.ctx.fillText("> Recursive Backtracking",20,this.canvas.height-30):this.mazeSolver.running?this.ctx.fillText("> Dijkstra's algorithm",20,this.canvas.height-30):this.ctx.fillText("> Click to move destination",20,this.canvas.height-30)}}}},s={},e=function e(i){var h=s[i];if(void 0!==h)return h.exports;var o=s[i]={exports:{}};return t[i].call(o.exports,o,o.exports,e),o.exports}(607);return e.default})()));